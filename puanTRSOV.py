import stanza
import string

# TÃ¼rkÃ§e NLP modeli yÃ¼kle
stanza.download("tr")
nlp = stanza.Pipeline(lang="tr", processors="tokenize,mwt,pos,lemma,depparse")

# GeÃ§erli sÄ±ralamalar ve puanlar
valid_orders = {
    ("S", "O", "V"): 0.99,
    ("O", "S", "V"): 0.66,
    ("S", "V"): 0.66,
    ("O", "V"): 0.33,
    ("V",): 0.11
}

def bul_puanSOV(sentence):
    # Noktalama iÅŸaretlerini kaldÄ±r
    sentence = sentence.translate(str.maketrans('', '', string.punctuation))
    
    doc = nlp(sentence)
    word_order = []
    dependencies = {}  # Kelimelerin baÄŸÄ±mlÄ±lÄ±k iliÅŸkilerini saklamak iÃ§in
    root_word = None   # GerÃ§ek yÃ¼klem ("V") kelimesini saklamak iÃ§in

    for sent in doc.sentences:
        for word in sent.words:
            dependencies[word.text] = word.head  # BaÄŸÄ±mlÄ± olduÄŸu kelimeyi sakla
            
            if word.deprel == "nsubj":
                word_order.append("S")  # Ã–zne
            elif word.deprel == "root":
                root_word = word.text  # GerÃ§ek yÃ¼klem olarak iÅŸaretle
                if "V" not in word_order:  # Fazladan "V" eklemeyi Ã¶nler
                    word_order.append("V")
            elif word.deprel == "compound":
                # EÄŸer yÃ¼klem yanlÄ±ÅŸ ÅŸekilde "compound" olarak etiketlenmiÅŸse, gerÃ§ek yÃ¼klem olarak kabul et
                root_word = word.text  
                if "V" not in word_order:
                    word_order.append("V")
            else:
                word_order.append("O")  # DiÄŸer tÃ¼m Ã¶ÄŸeler nesne olarak sÄ±nÄ±flanÄ±r

    # **Son "O" Ã¶ÄŸesinin baÄŸÄ±mlÄ±lÄ±k kontrolÃ¼**
    if word_order[-1] == "O":
        last_word = doc.sentences[0].words[-1].text  # Son kelimeyi al
        last_V_index = word_order.index("V") if "V" in word_order else -1
        last_V_word = root_word  # GÃ¼ncellenmiÅŸ gerÃ§ek yÃ¼klem kelimesini kullan

        # EÄŸer son kelime yÃ¼klem ("V") ile baÄŸlantÄ±lÄ± deÄŸilse son "O" kaldÄ±r
        if dependencies.get(last_word) == last_V_index or dependencies.get(last_word) == dependencies.get(last_V_word):
            word_order.pop()

    # **DoÄŸru sÄ±ralama kontrolÃ¼**
    order_tuple = tuple(word_order)
    puan = valid_orders.get(order_tuple, 0.0)

    # EÄŸer "V"den sonra baÅŸka bir Ã¶ÄŸe varsa puanÄ± sÄ±fÄ±rla
    if word_order.index("V") < len(word_order) - 1:
        puan = 0.00

    # **DoÄŸru sÄ±ralama kontrolÃ¼ ve puan hesaplama**
    if "S" in word_order and "V" in word_order:
        first_S_index = word_order.index("S")
        last_V_index = word_order.index("V")

        if first_S_index < last_V_index:
            if any(elem == "O" for elem in word_order[first_S_index:last_V_index]):
                puan = valid_orders.get(("S", "O", "V"), 0.99)  # "S", "O", "V" olarak kabul et
            else:
                puan = valid_orders.get(("S", "V"), 0.66)  # "S", "V" olarak kabul et
        else:
            puan = 0.00  # EÄŸer "V" Ã¶nce gelirse geÃ§ersiz
    elif "V" in word_order and all(elem == "O" for elem in word_order[:-1]):  
        puan = valid_orders.get(("O", "V"), 0.33)  # "O", "V" olarak kabul et
    elif word_order == ["V"]:  
        puan = valid_orders.get(("V",), 0.11)  # Tek baÅŸÄ±na "V" ise 0.11 puan ver
    else:
        puan = valid_orders.get(tuple(word_order), 0.0)



    # print(f"âœ… GÃ¼ncellenmiÅŸ Puan: {puan}")  # Hata olup olmadÄ±ÄŸÄ±nÄ± gÃ¶rmek iÃ§in ekleme!        
    
    # # BaÄŸÄ±mlÄ±lÄ±k iliÅŸkilerini ekrana yazdÄ±r
    # print("\nğŸ“Œ BaÄŸÄ±mlÄ±lÄ±k Analizi:")
    # for word in doc.sentences[0].words:
    #     print(f"Kelime: {word.text} -> BaÅŸlÄ± Kelime ID: {word.head} -> Etiket: {word.deprel}")
     
    return {
        "sentence": sentence,
        "word_order": word_order,
        "Puan": puan
    }
